#summary How to set up IvySvn for development.

= Introduction =

This page describes the steps needed to get IvySvn set up for development and covers checking out the code and building it from source as well as setting up an environment for running the unit tests.


= Details =

==Getting the source==
===Download a source release===
If you want to modify the source code of an official IvySvn release then you should download the "Source release" from the [http://code.google.com/p/ivysvn/downloads/list downloads] page and unpack it.

===Checkout the latest code from SVN===
If you want to modify the source code based on the current trunk version you should follow the instructions on the [http://code.google.com/p/ivysvn/source/checkout source] page. If you do not have SVN commit rights you can still check out the code and create and submit a patch with your changes.

==Building from source==
Once you have got the source you need to do the following:

(TODO: describe below in more detail and when they apply, as some steps are only relevant if you are trying to publish, most people will just want to create a .jar)

# Copy `ivysettings.xml.example` to `ivysettings.xml` and modify it to suit your setup.  # Copy `build.properties.example` to `build.properties` and set the values according to your setup.
# Run 
{{{
ant -Dskip.retrieve=true -Dversion=0 install
}}} 
*(TODO - does above still work? and why do we need version? and skipping retrieve? and maybe build would be better to describe, install can be described separately)*
which will compile the Java source code, build `ivysvnresolver.jar` into `build/dist` and then copy this, `ivysettings.xml`, `ivy-common-targets.xml` and the required 3rd party libraries to your `ANT_HOME/lib` folder.

Testing that it works:

*(TODO: review this and see if still relevant)*

  # Edit `ivy.xml` so that it contains dependencies to artifacts in your repository.
  # Run the following command and the dependent files should be downloaded to the `lib` folder.
{{{
ant retrieve
}}}
  # Make sure the "version" property is set and run 
{{{
ant publish
}}} 
and the current version of `ivysvnresolver.jar` 
should be published to your repository. NOTE: Every time you do a publish you will need to use a different 
version number (or set the property "publish.overwrite" to true).

==Unit testing==
*(TODO: flesh out the descriptions below to explain how to set up a webdav and svn repository and also how to use test.properties to control which one to use)*
# Setup a test Subversion repository which the unit tests will use to publish, retrieve and delete artifacts. 
# Copy the file `test.properties.example` (located in `src/test/conf`) to `test.properties` and fill in the properties required to connect to the test Subversion repository. 
# Run 
{{{
ant test
}}}
and the unit tests will be run, hopefully all passing.