<!--
Copyright 2010 Last.fm

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project name="ivy-common-targets" xmlns:ivy="antlib:org.apache.ivy.ant" default="retrieve">

  <!-- the following properties can be overwritten in your build.properties if necessary -->

  <!-- where ivy should look to find files you want to publish (i.e. where you build them to) -->
  <property name="ivy.distrib.dir" value="build/dist" />
  <!-- whether you want to publish ivy.xml -->
  <property name="publish.publishivy" value="true" />
  <!-- the name of the file under ${ivysettings.dir} which contains the ivy settings -->
  <property name="ivysettings.file.name" value="ivysettings.xml" />

  <target name="clean-cache" if="ivy.clean.cache">
    <ivy:cleancache />
  </target>

  <target name="ivy-init" description="Initialise ivy by loading ivysettings.xml" unless="ivy.initialised">
    <ivy:settings file="${ivysettings.dir}/${ivysettings.file.name}" />
    <ivy:resolve file="ivy.xml" refresh="true" checkIfChanged="true" />
    <property name="ivy.initialised" value="true" />
  </target>

  <target name="retrieve" depends="ivy-init" description="Retrieve dependencies with ivy" unless="ivy.skip.retrieve">
    <ivy:retrieve pattern="${ivy.lib.dir}/[artifact].[ext]" />
  </target>

  <target name="report" depends="retrieve" description="Generates a report of dependencies">
    <fail unless="ivy.report.dir" message="ivy.report.dir must be set" />
    <ivy:report todir="${ivy.report.dir}" graph="false" dot="true" />
  </target>

  <target name="buildnumber" depends="buildnumber-from-ivy, buildnumber-snapshot, buildnumber-fallback"
    description="Calculates version number" />

  <target name="buildnumber-timestamp">
    <tstamp>
      <format property="build.date.time.ivy" pattern="yyyyMMddHHmmss" />
      <format property="build.date.time.display" pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>
  </target>

  <target name="buildnumber-from-ivy" depends="buildnumber-timestamp, ivy-init">
    <echo message="Calculating version number for organisation=${ivy.organisation} and module=${ivy.module}" />
    <ivy:buildnumber organisation="${ivy.organisation}" module="${ivy.module}" />
    <echo message="Found current ivy.revision: ${ivy.revision}" />
    <echo message="Creating new ivy.new.revision: ${ivy.new.revision}" />
  </target>

  <target name="buildnumber-snapshot" depends="buildnumber-from-ivy" if="publishing.a.snapshot.release">
    <echo message="Snapshot build number specifically requested." />
    <!-- If the user version property is set - check that it is a SNAPSHOT revision -->
    <condition property="user.version.is.set.but.is.not.a.snapshot">
      <and>
        <isset property="version" />
        <not>
          <matches string="${version}" pattern=".+-SNAPSHOT" />
        </not>
      </and>
    </condition>
    <fail if="user.version.is.set.but.is.not.a.snapshot" message="Your 'version' property must be a SNAPSHOT revision." />

    <!-- Now we need to use the Ivy version is case we have no user version - start by working it out-->
    <condition property="current.repo.version.is.snapshot">
      <matches string="${ivy.revision}" pattern=".+-SNAPSHOT" />
    </condition>
    <condition property="recommended.ivy.snapshot.revision" value="${ivy.revision}" else="${ivy.new.revision}-SNAPSHOT">
      <isset property="current.repo.version.is.snapshot" />
    </condition>

    <!-- We either have a valid user version, in which case use it - otherwide use the repo version -->
    <condition property="build.version" value="${version}" else="${recommended.ivy.snapshot.revision}">
      <isset property="version" />
    </condition>

    <!-- Verify that it is valid -->
    <condition property="is.valid.snapshot.version">
      <matches string="${build.version}" pattern=".+-SNAPSHOT" />
    </condition>
  </target>

  <target name="buildnumber-fallback" depends="buildnumber-from-ivy">
    <!-- the next verision might be the current snapshot, without the '-SNAPSHOT' -->
  	<tempfile property="chopped.ivy.snapshot.file" deleteonexit="true" />
  	<echo file="${chopped.ivy.snapshot.file}" message="${ivy.revision}" />
  	<replaceregexp file="${chopped.ivy.snapshot.file}" match="([0-9\.]+)(-SNAPSHOT)?" replace="\1" byline="true" />
  	<loadfile property="chopped.ivy.snapshot" srcFile="${chopped.ivy.snapshot.file}"/>
  	<echo level="debug" message="Chopped: '${ivy.revision}' to: '${chopped.ivy.snapshot}'" />
  	
    <!-- If the last Ivy version was '-SNAPSHOT' use the chopped form - else use the next version -->
    <condition property="next.ivy.version" value="${chopped.ivy.snapshot}" else="${ivy.new.revision}">
      <matches string="${ivy.revision}" pattern=".+-SNAPSHOT" />
    </condition>
    <!-- If the user supplied a version - use that instead -->
    <condition property="build.version" value="${version}" else="${next.ivy.version}">
      <isset property="version" />
    </condition>
    <!-- for backwards compatibility only -->
    <condition property="user.version.was.set.manually">
      <isset property="version" />
    </condition>
    <property name="version" value="${build.version}" />
  </target>

  <!--
    Publish
  -->
  
  <!-- override to perform actions before publish -->
  <target name="pre-publish-actions" />
  <target name="post-publish-actions" />
  <target name="pre-snapshot-actions" />
  <target name="post-snapshot-actions" />
  
  <!-- this target should be overridden if you don't have a jar target or you want to publish more than just a single jar file -->
  <target name="publish"
    depends="set-fixed-property, init-publish-fixed, init-core-publish, pre-publish-actions, core-publish, post-publish-actions"
    description="Generate and publish a release jar for this project to the Ivy repository" />

  <!-- publishes a snapshot either using the users version or the ivy recommended version -->
  <target name="publish-snapshot"
    depends="set-snapshot-property, init-publish-snapshot, init-core-publish, pre-snapshot-actions, core-publish, post-snapshot-actions"
    description="Generate and publish a snapshot jar for this project to the Ivy repository" />

  <target name="set-fixed-property">
    <property name="publishing.a.fixed.release" value="true" />
  </target>

  <target name="init-publish-fixed" depends="clean-cache,buildnumber">
    <fail unless="publishing.a.fixed.release" />
    <fail if="is.valid.snapshot.version" message="Somehow we ended up with a snaphot version number: ${build.version}" />
  </target>

  <target name="set-snapshot-property">
    <property name="publishing.a.snapshot.release" value="true" />
  </target>

  <target name="init-publish-snapshot" depends="clean-cache,buildnumber">
    <fail unless="publishing.a.snapshot.release" />
    <fail unless="is.valid.snapshot.version" message="Somehow we ended up with a non-snaphot version number: ${build.version}" />
  </target>

  <target name="init-core-publish">
    <fail unless="build.date.time.ivy" message="No Ivy build time set: build.date.time.ivy" />
    <condition property="is.build.version.valid">
      <and>
        <isset property="build.version" />
        <matches string="${build.version}" pattern="[0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?" />
      </and>
    </condition>
    <fail unless="is.build.version.valid" message="Version number not in correct format: ${build.version}" />

    <condition property="is.integration.release">
      <matches string="${build.version}" pattern=".+-SNAPSHOT" />
    </condition>
    <condition property="is.fixed.release">
      <not>
        <isset property="is.integration.release" />
      </not>
    </condition>
    <condition property="publish.status" value="integration" else="release">
      <isset property="is.integration.release" />
    </condition>
    <condition property="publish.overwrite" value="true" else="false">
      <isset property="is.integration.release" />
    </condition>

    <echo level="debug" message="Status:${publish.status} Version:${build.version} Overwrite:${publish.overwrite}" />
    <condition property="version.display" value="${version}" else="Not set by user">
      <isset property="user.version.was.set.manually" />
    </condition>
    <echo message="[ User       ] version            : ${version.display}" />
    <echo message="[ Ivy        ] latest.integration : ${ivy.revision}" />
    <echo message="[ Calculated ] version            : ${build.version}" />
  </target>

  <target name="core-publish" depends="init-core-publish">
    <delete file="${ivy.distrib.dir}/ivy.xml" />
    <ivy:publish artifactspattern="${ivy.distrib.dir}/[artifact].[ext]" resolver="ivysvn" pubrevision="${build.version}"
      pubdate="${build.date.time.ivy}" status="${publish.status}" publishivy="${publish.publishivy}" overwrite="${publish.overwrite}"
      forcedeliver="true" />
    <echo message="project ${ant.project.name} released with version ${build.version}" />
  </target>

</project>

